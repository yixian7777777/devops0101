sudo: required
services:
- docker
language: python
python:
- '3.7'
before_install:
- docker version
- docker info
install:
- npm install newman
- pip install -r requirements.txt
- pip install -r test-requirements.txt
- pip install names
- pip install nose
- pip install Flask-Testing
- pip install Werkzeug
before_script:
- node --version
- npm --version
- node_modules/.bin/newman --version
script:
- python -m unittest discover
- docker build -t swagger-spring-example:1.0.0 .
- docker run --name example_api -d -t -p 127.0.0.1:8080:8080 swagger-spring-example:1.0.0
- docker ps
- count=0 && until $(curl --output /dev/null --silent --head --fail http://localhost:8080);
  do printf '.' && sleep 3 && count=$((count+1)) && if [ $count -gt 5 ]; then break;
  fi; done
- docker logs example_api
- node_modules/.bin/newman run tests/postman_collection.json -e tests/postman_environment.json
after_success:
- docker login -u $DOCKER_USER -p $DOCKER_PASS
- docker tag yixian7777777/swagger_server yixian7777777/swagger_server
- docker push yixian7777777/swagger_server
env:
  global:
  - secure: weIx95wGF1PeTXIP0OlaFuy/OMxdT9cQ5Vj5rj4MKvpfN7j1th2Jt7RLJ0AI+W4cMfJRn+7TRb71Nyu4JR8ljlB5cK+r7ttDqHUx6QHn5eOtqffLob/ojOWBubH40tnkHn+wFX6zPr21T05sjpeOe0vyGQbp/ea8HDOiuT3ci0RNGIbGNQ6y984VUsLKpxlwmYjfu9TdFkGPujk+mZMM8rKMAQ6E3vgfLNS9UBpaNsvHtm81ky/YLTtA/tQR8mPN6/I2v1bnnjgG9sMQe00S5dvTf6MwClTPESXh3fqx3CDfw9PGRfp037hZNTviMqV8sGmAPvtjKyyDRWER4a0jFf5rHJ9vwyOBLub3k/YF07QWLKLraZU1rARKUB/EffskxgkxbbGCTGqs+gIt6JlojPqCxMFti3e+ZRAEAaYfafHAFiap+4A5xdon+74FW2Cfhci1Wk2h2cvyAajbey8bNCCbFSJve8XGNfJsFxag2xUehs6QSKDnsEfpEG39ReqJCEjjs5JOATCKJphszWVnMgNml1YYBN9hCTwwVPIk13VSUdDhy9NyEvoFQfEgE9Lb7rVC87D8WGmUt4wJGwp9/JCItr0kJkavZq3VP0ZEsIEsM+X77GvM2Kr4HghDePIlYTYj4ptwO4GfMM+F7Sh7Hh1OhBdKp7zyK7KKlMsftuA=
  - secure: Xs2qZhR5yeRx5MzOh8nwaogWgZdf4ncdUtvHLTEnkeEp9lOAiS44vG7a3xabAzmKTgZ5Q+tdltKOqKnTJSGNZmP3XKzFOsA/SPC9CWLsompUhV5bEMSPrDOQRm9hrsQnG4YxcxeANuKbL8t1wzw2E++Jglve3pHR5MwYQ6lLDfPtVARXrqGssKAwY0eUKoJnZaSy1YWA4ZIu+7V0QN+DfLsYbAsWbTmUl7bEODwATpwFGJ0yRbGPN1ScDx77ZntmdwH6cxyT4yuuX/WGRbIoSw3iURaGlozKFp6aMdte3FL5wl8Z0w00kh+DwqTppIpWUj38JkTmCIabRPcMrtbTQBMisinFMAiEShfdD+hAhpslqFFKzvUX4m19G0v2xUxXyRjaAFa7XpYugMfVuw9XvaR/+8oavRecxAO6kLSwAOMA5xdLjRlQ7OOKTg29K5O0/ji6Qq/YLAl9sqwd8NlyBs7SrekiDkAdPRlLgJ1toya6gYTHR1rDpPwGZv5woUNdo6ADNYGIEaxP7y43Sz3HSvKsYqO854fYZp8rjjjmacWh05cz8PQo7VHV3TeCXK8u2BPREwijKnGTS5MM+w7BaziHTeNOV/N3Yw1xydkT/HduBPgtZcmzgKghars6sRMfMxnvWw7FpmXF5zJYpuuNfVIpV7hW2+tI3WNkAgcVbRk=
  - secure: rk9wSTZcqXrXM1phxPHBfzRRakcl9RJvN0Tw7R6I+M3RBWEc6C2AeSHFjNHSrgNqd253gnqtbT/GfjppBLr/BH+BU+PJE3oWJ9tuYdvtIGx+bFA/X6XsAL163MYEbBx+8Ld0YA2B4m3FQKG8TMF0ACHIFHhAWyL/D5NA4bLvwhPvUADjaN0P+QiJKzF0eJelvED9iuMnTCC8h1UypLNJ60aFvFFqaai/CL9J0bkqchY9lfOkC69JCVlPjGofqA/PtkW44tZxTplzUddUpDyZxh9VtALAZsYr6eDo3HltzKWYSxolQ6b8NULR6ZlGbsAWtAhI334XfVYCM9yen/L/118P+LKEy90Y/+tMJqBAtlF0TGQMm2RTkhPb2GV2zolWA+Mh1Q+hU73JzGG8NDtz0sMh8vqYSEmgg0BbnjVcVQLXo10OCo8OyTwmHF6nvOfa76WeYzwj/AnGaRaiKPNIIhcdTsQUTRqLxsWmzySLlWg4AsioCq8Wp0alte9hzFM5P7zCNzVs151laH+NBHUe0zuXINs9EnA2Y/aymQa1Wk2DNT82jQVfxfzuu7Ie68qoeOH/sn4JroupsB/4fxtgLVNe14b4sooxWcRtclqlCcSLEihhoa44WzmUD/pbfen+9ClNRAm3oT7a/8U62gau6KCUUycWh35aA9QUCVd6Dck=
  - secure: mD1mXJROnCVq/3gLmF6F3kDryZelU2d6XwQpgB6XNSgdzmd6ITZoL/A1FUzy+hbILBZEqQQcewMstohE6mmbmQ+6xbf//J6f6rEY4WdFd5pouOWV34SQaP8pswELZ6I6BklAaKMvuBz4VQ5tAEw9TSAurr4cJz3wziNEeWk1Rw1wVH+is+ZmC0j4NmFWq+ug26KmOfy2VDY+f431DKsevNoIjpRSLSjbOyACUPKDkJl2daK7rZ2D4V7uQhnYWGNUjZWRQAIMOiZsJbi/FIU3OVCGQ8jEFSO4LGJQZuwjWRJ1E3s93v56Ht24wmR3ddXwQ56DM7e/sf8mx1pyVK2/tCeMJPcEF6dwRyTPhI8HRvauHt0SYsmxyB44jjucqRgeMS9MsUddy840W9W41Ozi2Ak6TAsLrCn0O0rbklj01cGC3dVTF86kTzMu1ggOnu8c+YK6Rr0gW6mOhrGRhN3Kj9UbDkzbvk6it0BvBSPh6v8VbCVLUps6CIA5V41UqN2LCBJlPaMFi41jKjhxrIzTFgHUtrjDNBdbQo9yrK5pVk4sLTDnPac5C0C8fp0gMAnztxOft7skX0dwkD4N696YNv6zxX7ybSe6nFcluW4khKI+7GnV0OfMKtW5aAxdZAJsATHyGn9zurAM482W13jQUymVrxcd1xEuWJdyXIMMpgY=
  - secure: ZjeRAsuYP9aKg7pNTzA6nNVMAYus0dkkueLeZaZVp3PEpNRlc5rt+JnsIAagLKMe5UAtz6oVCOrev/IvRNUFar9vkrwTb722pR+gVweAkeWjQdExvxlXqziXRN7FyMDRkWaCsmtNOhq0NlkIwqKj5GVDWTjJ4Nxi6a70ZRbnHDaI9ZDV/6kZtjDtazZGaHe9j/n6DtNFu0igJbFDtysRy7gfXlzM8ClMnifvayDMXYRCCfJ+wVvAfqMysp7kKGS7sOuJUumJb9v/Rv0Lrgm1YE0ttzjcmgJnX8haL49cQ1flAcgESo8DZmRJT74+Yqf746LnnOxG6V1GdgZLdsEpibFxOFi9+WsnGG1DJ8XW8MMQjg0H4jbf4hvhRGjwBf2iZoShB2vnO+yHHnqGRS0H/joddwMoMHByKOnQmdn/+vrPP54aO6Yf75NP22O56RG0Yi2hKYbpX+d9M9BQbSRZy+AF3vvAbiewz0hT0MJEwJhmJJtIbI78ZwRnD/3ESH0xcWsyBgGtpc4XhxUK3G7u6bKas0mtKHHEIJcHEXo112bl/vQDw1UZAN0SzSE73hOqxjqDJyFofbjqlai8Oa2EfpVwXxozxMv3Q5v6G/hCzqPRVr4yGtER5jW1KnMKI4HZGvJZx2DLyffI4Vqz/W5TrFExt+hlUd2fWXvhyqW5zpQ=
